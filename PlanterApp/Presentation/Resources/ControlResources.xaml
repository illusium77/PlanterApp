<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:PlanterApp.Presentation.Converters">

    <c:PlantStatusToColorConverter x:Key="PlantStatusToColorConverter" />
    <c:PlantNoteVisibilityConverter x:Key="PlantNoteVisibilityConverter" />
    <c:PlantExclusionToOpacityConverter x:Key="PlantExclusionToOpacityConverter" />
    <c:PlantSelectionConverter x:Key="PlantSelectionConverter" />

    <Style TargetType="Label">
        <Setter Property="Margin" Value="11,11,0,0"/>
    </Style>

    <Style TargetType="Button">
        <Setter Property="Margin" Value="11,11,0,0"/>
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property = "Background" Value="Red"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property = "Foreground" Value="Green"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Margin" Value="11,11,0,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <!--<Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate/>-->
                <!-- Set an empty error template, hide the red rectangle -->
            <!--</Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Background" Value="{StaticResource InvalidControlBrush}"/>
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ValidationErrorsConverter}">
                            <Binding Path="(Validation.Errors)" RelativeSource="{RelativeSource Self}"/>
                            <Binding Path="(Validation.Errors).Count" RelativeSource="{RelativeSource Self}"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <Style TargetType="DatePicker">
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="MinWidth" Value="100"/>
        <!--<Setter Property="Margin" Value="11,11,0,0"/>-->
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style TargetType="ComboBox">
        <Setter Property="Margin" Value="11,11,0,0"/>
    </Style>

    <Style TargetType="RadioButton">
        <Setter Property="Margin" Value="11,11,0,0"/>
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="Margin" Value="11,11,0,0"/>
    </Style>

    <Style TargetType="DataGrid">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserReorderColumns" Value="True"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray"/>
        <Setter Property="VerticalGridLinesBrush" Value="LightGray"/>
    </Style>

    <Style x:Key="TextCellElementStyle" TargetType="TextBlock">
        <Setter Property="Padding" Value="4,2,4,3"/>
    </Style>

    <Style x:Key="TextCellEditingStyle" TargetType="TextBox">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2,2,2,3"/>
    </Style>

    <Style x:Key="PlanterMenuItemStyle" TargetType="MenuItem">
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
        <Setter Property="InputGestureText" Value="{Binding Gesture.DisplayString}" />
    </Style>

    <!--<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Opacity" Value="0.35"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>-->

    <Style x:Key="HeaderLabel" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>
    
    <Style x:Key="EditableTextBlockStyle" TargetType="TextBox">
        <!--<Setter Property="IsEnabled" Value="False" />-->
        <!--<Setter Property="Template" Value="{StaticResource EditableTextBlockTemplate}" />-->
    </Style>

    <ControlTemplate TargetType="TextBox" x:Key="EditableTextBlockTemplate">
        <Grid>
            <!--<TextBlock Text="Test" />-->
            <ContentPresenter />
        </Grid>
    </ControlTemplate>

    <!--<Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>-->

    <ControlTemplate TargetType="{x:Type TextBoxBase}" x:Key="EditableTextBlockTemplate2">
        <Grid>
            <!--Name="Border"
                CornerRadius="2"
                Padding="2"
                BorderThickness="1">-->
            <!--<Border.Background>
                <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
            </Border.Background>
            <Border.BorderBrush>
                <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
            </Border.BorderBrush>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlLightColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="ReadOnly">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource DisabledControlDarkColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MouseOver" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>-->
            <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
        </Grid>
    </ControlTemplate>


    <!--<ControlTemplate TargetType="Button" x:Key="plantButton">
        <Grid>
            <Grid>
                <Grid.Effect>
                    <DropShadowEffect x:Name="BorderShadow" ShadowDepth="1" BlurRadius="2" Color="{Binding IsSelected, Converter={StaticResource PlantSelectionConverter}, ConverterParameter=BorderShadow}" />
                </Grid.Effect>

                <Border x:Name="ButtonBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True"
                        Background="{Binding CurrentStatus.State, Converter={StaticResource PlantStatusToColorConverter}}"                        
                        CornerRadius="2" Margin="1,1,0,0"
                        BorderThickness="{Binding IsSelected, Converter={StaticResource PlantSelectionConverter}, ConverterParameter=BorderThickness}"
                        RenderTransformOrigin="0.5, 0.5">
                    
                    <Border.BorderBrush>
                        <SolidColorBrush x:Name="AnimatedBorderBrush" Color="{Binding IsSelected, Converter={StaticResource PlantSelectionConverter}, ConverterParameter=BorderColor}" />
                    </Border.BorderBrush>

                    <Polygon Points="0,0 6,0, 0,6" Stroke="Transparent" Fill="Red"
                                 Visibility="{Binding Plant.Notes, Converter={StaticResource PlantNoteVisibilityConverter}}" />
                </Border>
            </Grid>

            <Grid>-->
                <!-- separate visual tree for content, that way it will not be blurred by DropShadowEffect -->
                <!--<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding IsSelected}" Value="true">

                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="BorderAnimation">
                        <Storyboard>-->
                            <!--<ColorAnimation RepeatBehavior="Forever" Storyboard.TargetName="AnimatedBorderBrush" Storyboard.TargetProperty="Color" To="Red" Duration="0:0:1" AutoReverse="True" />-->
                            <!--<ColorAnimation RepeatBehavior="Forever" Storyboard.TargetName="BorderShadow" Storyboard.TargetProperty="Color" To="Red" Duration="0:0:1" AutoReverse="True" />-->
                            <!--<ThicknessAnimation RepeatBehavior="Forever" Storyboard.TargetName="ButtonBorder" Storyboard.TargetProperty="BorderThickness" From="1" To="2"  Duration="0:0:1" AutoReverse="True" />-->
                        <!--</Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="BorderAnimation" />
                </DataTrigger.ExitActions>
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="RenderTransform" TargetName="ButtonBorder">
                    <Setter.Value>
                        <ScaleTransform ScaleX="1.02" ScaleY="1.02" />
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Red" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="RenderTransform" TargetName="ButtonBorder">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0.98" ScaleY="0.98"/>
                    </Setter.Value>
                </Setter>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>-->

</ResourceDictionary>